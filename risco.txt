27 10- alejandro me dijo que soy una VAINA LOCA

si no pasamos de fase de grupos la culpa es del wapo


el vendedor ... (2) 	-> 0
el vendedor mas grande del mundo og mandino consejos -> 125
mandino, og -> 125
pedacito ->224


Teniendo un grafo dirigido ponderado de N nodos no aislados, sea x el nodo inicial. Un vector D de tamaño N guardará al final del algoritmo las distancias desde x hasta el resto de los nodos.

-Inicializar todas las distancias en D con un valor infinito relativo, ya que son desconocidas al principio, exceptuando la de x, que se debe colocar en 0, debido a que la distancia de x a x sería 0.
-Sea a = x (Se toma a como nodo actual.)
-Se recorren todos los nodos adyacentes de a, excepto los nodos marcados. Se les llamará nodos no marcados vi.
-Para el nodo actual, se calcula la distancia tentativa desde dicho nodo hasta sus vecinos con la siguiente fórmula: dt(vi) = Da + d(a,vi). Es decir, la distancia tentativa del nodo ‘vi’ es la distancia que actualmente tiene el nodo en el vector D más la distancia desde dicho nodo ‘a’ (el actual) hasta el nodo vi. Si la distancia tentativa es menor que la distancia almacenada en el vector, se actualiza entonces el vector con esta distancia tentativa. Es decir, si dt(vi) < Dvi -> Dvi = dt(vi)
-Se marca como completo el nodo a.
-Se toma como próximo nodo actual el de menor valor en D (puede hacerse almacenando los valores en una cola de prioridad) y se regresa al paso 3, mientras existan nodos no marcados.

Una vez terminado al algoritmo, D estará completamente lleno.

pseudo
DIJKSTRA (Grafo G, nodo_fuente s)       
    para u (pertenece a) V[G] hacer
        distancia[u] = INFINITO
        padre[u] = NULL
        visto[u] = false
    distancia[s] = 0
    adicionar (cola, (s, distancia[s]))
    mientras que cola no es vacía hacer
      u = extraer_mínimo(cola)
      visto[u] = true
      para todos v (pertenece a) adyacencia[u] hacer
          si distancia[v] > distancia[u] + peso (u, v) hacer
              distancia[v] = distancia[u] + peso (u, v)
              padre[v] = u
              adicionar(cola,(v, distancia[v]))